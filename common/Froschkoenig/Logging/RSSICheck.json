/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false,
  "enabled": false
}
-- do not edit previous lines - END --*/
//
// LOWBAT-Meldungen
// 
// Skript aus ioBroker Forum
// https://www.iobroker.net/docu/index-310.htm?page_id=2936&lang=de
// angepaßt 2020 von T.Wieckberg

const path = "0_userdata.0.Logging.RSSIStatus"; // Pfad zu Objekten im javascript-Adapter
const fC = false; // Objekte neu erstellen?
const logging = false;

const id_deviceAmount = path + ".deviceAmount";
//const id_realLowbat = path + ".realLowbat";
const id_textRSSI = path + ".textRSSI";

createState(id_deviceAmount, 0, fC, {
    name: "RSSI - Anzahl Geräte",
    type: "number",
    role: "value"
});
/*
createState(id_realLowbat, 0, fC, {
    name: "Lowbat - Anzahl leere Geräte",
    type: "number",
    role: "value"
});
*/
createState(id_textRSSI, " ", fC, {
    name: "RSSI - Text",
    type: "string",
    role: "value"
});


//createState('zählenLowbat.möglicheLOWBAT', 0, {type: 'number'});   // wenn benötigt: Anzahl der vorhandenen LOWBAT
//createState('zählenLowbat.anzahlLOWBAT', 0, {type: 'number'});     // wenn benötigt: Anzahl der tatsächlichen LOWBAT
//createState('zählenLowbat.textLOWBAT', " ", {type: 'string'});     // Anzeige der LOWBAT

//var cacheSelectorLOWBAT  = $('channel[state.id=*.LOWBAT|*.LOW_BAT]');
// /.*(\.MOTION|\.PRESENCE_DETECTION_STATE)/

var cacheSelectorRSSI  = $('*.RSSI_DEVICE|.RSSI_PEER]');

var loggen = true;  // = false, wenn kein Logging gewünscht

function captureRSSI() {
   // Setzt die Zähler vor dem Durchlauf aller Elemente *.LOWBAT auf 0
   var anzahlGeraete = 0;
   var textRSSI      = [];
   cacheSelectorRSSI.each(function (id, i) {   // Schleife für jedes gefundenen Element *.LOWBAT
      var status = getState(id).val;             // Zustand *.LOWBAT abfragen (jedes Element)
      var obj    = getObject(id);
      if (status) {
         textRSSI.push(obj.common.name + '(' + status + ' dBm)');       // Zu Array hinzufügen
      }
      if(loggen) log("Geräte Nr. " + i + ": " + getObject(id).common.name + ": " + status);
      ++anzahlGeraete;                         // Zählt die Anzahl der vorhandenen Geräte unabhängig vom Status
   });

   // Schleife ist durchlaufen. Im Log wird der aktuelle Status (Anzahl, davon LOWBAT zutreffend) ausgegeben
   if(loggen) log("Text: " + textRSSI.join(', '));
   if(loggen) log("Anzahl Geräte: " + anzahlGeraete + " # davon RSSI erkannt: " +  textRSSI.length);

   // die ermittelten Werte werden als javascript.0. Variable in ioBroker gespeichert (z.B. für die Verarbeitung in VIS)
   setState(id_textRSSI, textRSSI.join(',<br>')); // Schreibt die Namen der Geräte mit LOWBAT Meldung
   //setState(id_realLowbat, textRSSI.length);        // Schreibt die Anzahl der LOWBAT-Meldungen
   setState(id_deviceAmount, anzahlGeraete);      // Schreibt die Anzahl der vorhandene Geräte
}

cacheSelectorRSSI.on(function() {   // bei Zustandänderung *.RSSI in allen Gewerken
   captureRSSI();
});

// Einmal ausführen
captureRSSI();

// oder!! soll entweder ausgelöst werden alle 60 Minuten
//schedule("*/60 * * * *", function () {
//   countLowbat();
//});
